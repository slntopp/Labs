class ATM {
    private:
        char* id; //Строковое поле для идентификационного номера
        const int divs[6] = { 10, 20, 50, 100, 200, 500 }; //Номиналы купюр
        int money[6], min, max, all; //Массив хранящий количество купюр, нижняя и верхняя граница в банкомате, а также общее количество денег в банкомате
    public:
        ATM(const char* _id, int _min = 10, int _max = 400): min(_min), max(_max) { //Конструктор принимает строку с id, границы имеют значения по умолчанию, но можно и с ними
            id = new char[strlen(_id) + 1]; //Выделение памяти в id под запись _id + 1 для окончания строки("\0")
            strcpy(id, _id); //Копирование _id в id
            for(int i = 0; i < 6; ++i) money[i] = 0; //Присваивание нуля всем купюрам, т.е. банкомат пуст
            all = AllMoney(); //Подсчет всех денег в банкомате
        }
        ATM(const ATM &obj): min(obj.min), max(obj.max), all(obj.all) { //Конструктор копирования
            id = new char[strlen(obj.id) + 1];
            strcpy(id, obj.id);
            for(int i = 0; i < 6; ++i) money[i] = obj.money[i];
        }
        int AllMoney(){ //Подсчет всех денег в банкомате
            int result = 0;
            for(int i = 0; i < 6; ++i) result += (money[i] * divs[i]); //Размер номинала умножается на количество "бумажек" и добавляется в итог
            return result;
        }
        const char* toString(){ //Специальная функция для возврата количества денег в банкомате в виде строки
            char* out = new char[32]; //Выделение памяти под новую строку
            itoa(AllMoney(), out, 10); //Перевод всей суммы в банкомате в строку и запись ее в <out>
            int i = 0;
            for(; out[i] != '\0'; ++i); //Проходим по <out> до конца строки
            out[i] = 'р', out[i+1] = '.', out[i+2] = '\0'; //Дописываем в конец "р." - тобишь рубли, и символ конца строки
            return out; //Возвращаем значение
        }
        int PutMoney(int *_money){ //Загрузка денег в банкомат с помощью массива, аналогичного массиву money в классе(т.е. кол-во бумажек по номиналам)
            for(int i = 0; i < 6; ++i) money[i] += _money[i]; //Сложение соответствующих элементов
            all = AllMoney(); //Подсчет кол-ва всей суммы в банкомате
        }
        int PutMoney(int _money){ //Загрузка денег числом
            for(int i = 0; i < 6; ++i){ //Разбиение числа на купюры по номиналам
                money[i] += _money / divs[i]; //Всегда начинается запись с мелких денег(10-ок), записывается результат деления нацело на 10
                _money = _money % divs[i]; //На место входной суммы становится остаток от деления выше
            }
            all = AllMoney(); //Пересчет всех денег в банкомате
            cout << "Остаток от пополнения банкомата: " << _money << "; Внесено: " << all << "р." << endl; //Вывод информационного сообщения об операции
            return _money;
        }
        int GetMoney(int summ){ //Снятие денег
            cout << "Попытка снятия " << summ << "р.:" << endl;
            if(summ < min || summ > max){ cout << "Сумма вне границ выдачи банкоматом! Выдается от " << min << "р. до " << max << "р." << endl; return 0; } //Останвление процесса, если сумма выходит за определенные границы в банкомате
            else if(summ > all) { cout << "Сумма превышает остаток в банкомате! Вы можете снять до " << all << "р." << endl; return 0; } //Остановка операции в случае недостатка средств в банкомате
            else if(summ % 10 != 0) { cout << "Сумма некратна 10-ти, в банокомате только купюры от 10-ти рублей!"; return 0; } //Остановка процесса, если введенная сумма не может быть выдана
            cout << "Успешное снятие! Выдача: " << summ << "р." << endl;
            for(int i = 5; i >= 0; --i){ //Уменьшение количества купюр в соответсвии с введенной суммой
                money[i] -= summ / divs[i];
                summ = summ % divs[i];
            }
            all = AllMoney(); //Переучет
            return summ;
        }
};