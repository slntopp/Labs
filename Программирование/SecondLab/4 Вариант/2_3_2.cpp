#include <iostream> // подключение библиотеки iostream для cin и cout
#include <cmath> // подключение библиотеки cmath, для использования fabs()- модуля в данной задаче
#include <iomanip> // подключение библиотеки iomanip для работы модификатора setw

using namespace std; // используем пространство имен std


int main() // функция main 
{

	char c, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10; // обьявление переменных символьного типа данных char (для построения таблицы)*
	double x0 = -0.8, xn = 1, dx = 0.1, xi = x0; // обьявление переменных вещественного типа double заданных по условию
	int i; // обьявление некой переменной i целочисленного типа данных int
	const double E = 0.000001; // обьявление постоянной E=0.000001
	double y, xPower, yx; // переменные вещественного типа данных, которые понадобятся нам для решения задания
	// задаем символы, которые понадобятся нам для построения таблицы
	c = char(196);  c1 = char(218);  c2 = char(194);  c3 = char(191);
	c4 = char(179); c5 = char(195);  c6 = char(197);  c7 = char(180);
	c8 = char(192); c9 = char(217);  c10 = char(193);
	// вывод "шапки" таблицы
	cout << c1 << c << c << c << c << c << c2 << c << c << c << c << c << c << c << c << c << c << c << c3 << '\n';
	cout << c4 << "  x  " << c4 << "     y     " << c4 << '\n';

	for (i = 0; xi < xn; i++) { // начало первого цикла for (От i=0 до тех пор, пока xn больше xi прибавляем к i единицу)
		xi = x0 + i*dx; // задаем алгоритм по которому изменяется наше значение xi
		yx = -xi; // задаем yx изначально, все слогаемые без xi в степени
		xPower = xi; // придаем переменной xPower значение xi
		if (xi < 1) { // условный оператор if, т.к по заданию ОДЗ функции, x < 1. T.e если x<1, то будет выполнятся алгоритм в  {}
			for (int j = 2; abs(xPower) > E; j++) { // начало второго цикла for (От j=2 до тех пор, пока модуль от xPower > const E, выполняется j++) + обьявление переменной j целочисленного типа int
				xPower *= xi; // возведение xi в степень *[ xPower*=xi ~ xPower=xPower*xi ]*
				yx -= xPower / double(j); // вычитаем слогаемые  *[ a -= b ~ a = a - b ]*
			}// конец второго цикла for, определили ln(x-1)
			y = yx + xi; // прибавляем xi, т.к по условию надо найти ln(x-1)+x
			cout << c5 << c << c << c << c << c << c6 << c << c << c << c << c << c << c << c << c << c << c << c7 << '\n';
			cout << setiosflags(ios::fixed) << setprecision(2); // setiosflags(ios::fixed) - используем форму вывода с фиксированной запятой
			cout << c4 << setw(5) << xi; // setw() - количество позиций для вывода числа; вывод xi
			cout << setiosflags(ios::fixed) << setprecision(5); // setprecision() - допустимое количество знаков после запятой
			cout << c4 << setw(11) << y << c4 << "\n"; // вывод значения y
		}
		else { // если не выполняется условие if, то выполняется условие else (иначе)
			cout << c5 << c << c << c << c << c << c6 << c << c << c << c << c << c << c << c << c << c << c << c7 << '\n';
			cout << setiosflags(ios::fixed) << setprecision(2); // setiosflags(ios::fixed) - используем форму вывода с фиксированной запятой
			cout << c4 << setw(5) << xi; // setw() - количество позиций для вывода числа; вывод xi
			cout << setiosflags(ios::fixed) << setprecision(5); // setprecision() - допустимое количество знаков после запятой
			cout << c4 << setw(11) << "Math error!" << c4 << "\n"; // вывод текста: Math error!
		}
	}// конец первого цикла for

	cout << c8 << c << c << c << c << c << c10 << c << c << c << c << c << c << c << c << c << c << c << c9 << '\n'; // закрываем таблицу

	system("pause"); // команда задержки экрана
	return 0; // возвращаем 0
}

