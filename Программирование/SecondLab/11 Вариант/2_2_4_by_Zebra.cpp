// ZEBRA 2.2.4 
#include <iostream> // cout | cin
#include <iomanip> // подключение библиотеки iomanip для работы модификатора setw

using namespace std; // используем пространство имен std

int main() { // функция main
	char c, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10; // обьявление переменных символьного типа данных char
	double x0 = 0, dx = 0.4, xn = 4, xi=x0, xPower, y; // обьявление нужных нам переменных вещественного типа double
	int n, i, k; // обьявление нужных нам переменных целочисленного типа int 

	cout << "Enter n:"; // вывод текста
	cin >> n; // ввод n
	cout << endl; // перевод курсора на следующую строку

	// задаем символы, которые понадобятся нам для построения таблицы
	c = char(196);  c1 = char(218);  c2 = char(194);  c3 = char(191);
	c4 = char(179); c5 = char(195);  c6 = char(197);  c7 = char(180);
	c8 = char(192); c9 = char(217);  c10 = char(193);
	// вывод "шапки" таблицы
	cout << c1 << c << c << c << c << c << c2 << c << c << c << c << c << c << c << c << c << c << c << c3 << '\n';
	cout << c4 << "  x  " << c4 << "     y     " << c4 << '\n';

	for (i = 0; xi < xn; i++) { // начало первого цикла for
		xi = x0 + i*dx; // алгоритм изменения xi
		xPower = xi; // присваиваем xPower=xi, для дальнейшего возведения в степень xi с помощью циклов
		y = -(xi); //  подробнее, смотри в сопутствующей справке, страница 20.
		
		for (k = 2; k <= n; k++) { // начало второго цикла for
			xPower *= xi; // возводим xi в степень с помощью  цикла
			if (k % 2 == 0) { // т.к единица в степени n по заданию, можно сделать решения через такие ифы
				y = y + k*xPower; // сам результат, при четной степени n
			}
			else {
				y = y - k*xPower; // сам результат, при нечетной степени n
			}
		} // конец второго цикла for
		cout << c5 << c << c << c << c << c << c6 << c << c << c << c << c << c << c << c << c << c << c << c7 << '\n';
		cout << setiosflags(ios::fixed) << setprecision(2); // setiosflags(ios::fixed) - используем форму вывода с фиксированной запятой
		cout << c4 << setw(5) << xi; // setw() - количество позиций для вывода числа; вывод x1
		cout << setiosflags(ios::fixed) << setprecision(6); // setprecision() - допустимое количество знаков после запятой
		cout << c4 << setw(11) << y << c4 << "\n"; // вывод y
	} // конец первого цикла for

	cout << c8 << c << c << c << c << c << c10 << c << c << c << c << c << c << c << c << c << c << c << c9 << '\n'; // закрываем таблицу

	system("pause"); // команда задержки экрана
	return 0; // возвращает 0
}