// ZEBRA 2.2.1 WHILE
#include <iostream> // подключение библииотеки iostream для cout|cin
#include <math.h> // подключение библиотеки math.h для использования математических функций
#include <iomanip> // подключение библиотеки iomanip для работы модификатора setw

using namespace std; // используем пространство имен std

int main() { // функция main
	system("color FD"); // задает цвет фона и шрифта в консольном приложении

	double x1 = 0, xn, x0, dx, a, y; // обьявление переменных вещественного типа double
	int i; // обьявление переменной натурального типа int
	char c, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10; // обьявление переменных символьного типа данных char
													 // задаем переменным их значения по условию
	x0 = 0.8;
	xn = 2;
	dx = 0.1;
	a = 0.9;
	// задаем символы, которые понадобятся нам для построения таблицы
	c = char(196);  c1 = char(218);  c2 = char(194);  c3 = char(191);
	c4 = char(179); c5 = char(195);  c6 = char(197);  c7 = char(180);
	c8 = char(192); c9 = char(217);  c10 = char(193);
	// вывод "шапки" таблицы
	cout << c1 << c << c << c << c << c << c2 << c << c << c << c << c << c << c << c << c << c << c << c3 << '\n';
	cout << c4 << "  x  " << c4 << "     y     " << c4 << '\n';
	i = 0;// присваиваем i значение 0
	while( x1 < xn ) { /// начало цикла while 
		i++;
		x1 = x0 + i*dx; // задаем алгоритм по которому изменяется наше значение x1
		if (x1 > 1) { // условный оператор if (Если значение x1 > 1, то выполняется условие в {})
			y = log(x1)*a + pow(abs(x1), double(1 / 3)); // вызов функции log (десятичный логорифм) и функции pow (возведение в степень)
		}
		else {// если не выполняются условия заданные в if, то выполняются условия заданные в else(иначе)
			y = 2 * a*cos(x1) + 3 * x1*x1; // вызов функции cos(косинус от x1)
		}
		cout << c5 << c << c << c << c << c << c6 << c << c << c << c << c << c << c << c << c << c << c << c7 << '\n';
		cout << setiosflags(ios::fixed) << setprecision(2); // setiosflags(ios::fixed) - используем форму вывода с фиксированной запятой
		cout << c4 << setw(5) << x1; // setw() - количество позиций для вывода числа; вывод x1
		cout << setiosflags(ios::fixed) << setprecision(6); // setprecision() - допустимое количество знаков после запятой
		cout << c4 << setw(11) << y << c4 << "\n"; // вывод y
	}/// конец цикла while

	cout << c8 << c << c << c << c << c << c10 << c << c << c << c << c << c << c << c << c << c << c << c9 << '\n'; // закрываем таблицу
	system("pause"); // команда задержки экрана
	return 0; // возвращаем 0
}