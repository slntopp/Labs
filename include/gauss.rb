require 'matrix'

def GetXbyGaussMethod(a, b, n, params = nil)

    # if Matrix[*a].det.abs < 1e-12 then
        # puts "Ошибка! Матрица вырожденная: detA = #{Matrix[*a].det}"
        # puts "---------------------------------------"
        # Kernel.exit(1)
    # end

    full = a.make_full b # Создание массива с расширенной матрицей, метод make_full также описан в art.rb
    full.map! { |e| e.map!{|ex| ex.to_f }}
    full.sort_by! { |item| item[0].abs } .reverse! # Сортировка матрицы по модулю значений первого столбца
=begin
        Следующая конструкция есть ничто иное, как приведение матрицы к треугольному виду.
        Алгоритм будет выглядеть примерно так:
            1) Берем первый элемент второй строки[0] и сохраняем
            2) Проходим по каждому элементу этой строки, отнимая от него произведение его же самого на частное сохраненного значения
        и первого элемента главной диагонали
            3) Переходя к следующей строке, делаем все в точности также
            4) В следующей итерации основного цикла {for i in .... } мы как бы смещаемся по диагонали от тех элементов,
        что были в предыдущих шагах, т.е. вместо первого элемента второй строки - второй элемент третьей, вместо первого эл.
        главной диагонали - второй и тд.
            5) Таким шагами мы проходим матрицу до конца(на случай, если матрица будет размером большим, чем 3x3)
=end
    for i in 0..(n - 1) do
        for j in (i + 1)..(n - 1) do
            key = full[j][i] # [0]
            for k in (i)..(n) do
                full[j][k] -= full[i][k] * (key / full[i][i])
            end
        end
    end

    b, a = full.divide # Вновь разбиваем расширенную матрицу обратно в А и b
=begin
        Теперь, когда матрица приведена к треугольному виду, можно искать непосредственно корни. Для этого нужно выполнить обратный ход.
        Алгоритм:
            1) Идем по массиву b с конца к началу
            2) Записываем в последний x частное свободного члена и коэффициента при этом х в матрице - это и есть первый корень,
        так как матрица уже приведена к треугольному виду
            3) Проходим по свободным членам отнимая от них произведение известного нам х на соответствующий ему в каждой строке коэффициент
            4) Действие повторяется, а засчет вычитания выше, столбцы с известными и записанными х как-бы вычеркивается
=end
    x = []
    for z in 0..(n - 1) do
        i = n - 1 - z
        x[i] = b[i] / a[i][i]
        for j in 0..i do
            b[j] -= a[j][i] * x[i]
        end
    end
    return x
end

def GetDiscVector(a, b, x)
    return Matrix[*a] * Vector[*x] - Vector[*b]
end
